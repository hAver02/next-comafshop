// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id Int @id @default(autoincrement())
  first_name String
  last_name String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password String?
  role  Role @default(user)
  budgets   Budget[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Category {
  id Int @id @default(autoincrement())
  name String
  subcategories SubCategory[]
}

model SubCategory{
  id Int @id @default(autoincrement())
  name String
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  products Product[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String 
  description    String?
  price          Float
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  budgetProducts BudgetProduct[]
  subcategoryId  Int
  subcategory    SubCategory      @relation(fields: [subcategoryId], references: [id]) // Relación con subcategoría
}

model Budget {
  id             Int             @id @default(autoincrement())
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  totalAmount    Float
  budgetProducts BudgetProduct[] 
  createdAt      DateTime         @default(now())
  answered Boolean @default(false)
}

model BudgetProduct {
  id        Int      @id @default(autoincrement())
  budgetId  Int
  budget    Budget   @relation(fields: [budgetId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float   
}

